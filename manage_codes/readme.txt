Rust代码管理
--------------------------------------------

包 package: 相当于是一个项目
包中可以包含至多一个库 crate(library crate)。包中可以包含任意多个二进制 crate(binary crate)
    src/main.rs
    src/lib.rs

    src/bin/



crate:  Rust 在编译时最小的代码单位
    1. 二进制 包含 main.rs 文件
    2. 库
crate root 是一个源文件，Rust 编译器以它为起始点，并构成你的 crate 的根模块

模块

路径


Cargo workspaces

---------------------------------------------------------------------------------
解释 模块、路径、use关键词和pub关键词如何在编译器中工作
- 从 crate 根开始
- 声明模块: 在 crate 根文件中，你可以声明一个新模块；
- 声明子模块: 在除了 crate 根节点以外的其他文件中，你可以定义子模块。
- 模块中的代码路径: 一旦一个模块是你 crate 的一部分，你可以在隐私规则允许的前提下，从同一个 crate 内的任意地方，通过代码路径引用该模块的代码。
- 私有 vs 公用: 一个模块里的代码默认对其父模块私有。为了使一个模块公用，应当在声明时使用pub mod替代mod。
- use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。
