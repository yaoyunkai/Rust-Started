结构体的定义和实例化

注意整个实例必须是可变的；Rust 并不允许只将某个字段标记为可变。
另外需要注意同其他任何表达式一样，我们可以在函数体的最后一个表达式中构造一个结构体的新实例，来隐式地返回这个实例。


---------------------------------------------------------------------

可以定义与元组（在第三章讨论过）类似的结构体，称为 元组结构体（tuple structs）。

一个没有任何字段的结构体！它们被称为 类单元结构体（unit-like structs）
因为它们类似于 ()，即“元组类型”一节中提到的 unit 类型。

我们使用了自身拥有所有权的 String 类型而不是 &str 字符串 slice 类型。
这是一个有意而为之的选择，因为我们想要这个结构体拥有它所有的数据，为此只要整个结构体是有效的话其数据也是有效的。

可以使结构体存储被其他对象拥有的数据的引用，不过这么做的话需要用上 生命周期（lifetimes），这是一个第十章会讨论的 Rust 功能。
生命周期确保结构体引用的数据有效性跟结构体本身保持一致。
如果你尝试在结构体中存储一个引用而不指定生命周期将是无效的，